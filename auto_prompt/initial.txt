#include <stdlib.h>
#define assume(e) if(!(e)) exit(-1);

extern int unknown1();

int main() {
  int a = 0;
  int j = unknown1();
  int m = unknown1();
  if(m<=0)
    return 0;


  for(j = 1; j <= m ; j++){
    if(unknown1()) 
       a++;
    else
       a--; 
  }
  {;
//@ assert(a>=-m && a<=m);
}

}
    Please analyze the above C code and verify the assertions in it. 
    In order to verify the assertion, you need to propose loop invariants for the loop in the program. A loop invariant is a property that holds **before the loop**, and **after each iteration of the loop**. Besides, the loop invariants should be helpful to verify the assertion.

In the end, summarize the loop invariants in the following format. Each invariant is a C logical expression, which can  contain "&&", "||" or "!". Besides, you can use implication ("==>") in the loop invariants. Note that, if a variable is not initialized, you cannot make any assumption on it. If certain variables are non-deterministic at the beginning or end of the loop, use an implication(==>) to make the invariant trivially true at that location. 

/*@
  loop invariant i1: ...;
  loop invariant i2: ...;
*/
