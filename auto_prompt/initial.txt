#include <stdlib.h>
#define assume(e) if(!(e)) exit(-1);
extern int unknown_int(void);

int main() {
    unsigned int i,j,a,b;
    int flag = unknown_int();
    a = 0;
    b = 0;
    j = 1;
    if (flag) {
        i = 0;
    } else {
        i = 1;
    }

    while (unknown_int()) {
        a++;
        b += (j - i);
        i += 2;
        if (i%2 == 0) {
            j += 2;
        } else {
            j++;
        }
    }
    if (flag) {
        {;
//@ assert(a == b);
}

    }
    return 0;
}
    Please analyze the above C code and verify the assertions in it. 
    In order to verify the assertion, you need to propose loop invariants for the loop in the program. A loop invariant is a property that holds **before the loop**, and **after each iteration of the loop**. Besides, the loop invariants should be helpful to verify the assertion.

In the end, summarize the loop invariants in the following format. Each invariant is a C logical expression, which can  contain "&&", "||" or "!". Besides, you can use implication ("==>") in the loop invariants. Note that, if a variable is not initialized, you cannot make any assumption on it. If certain variables are non-deterministic at the beginning or end of the loop, use an implication(==>) to make the invariant trivially true at that location. 

/*@
  loop invariant i1: ...;
  loop invariant i2: ...;
*/
